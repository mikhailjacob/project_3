using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using System.Collections;
using UnityEngine;

namespace StoryEngine.Trace {
    /// <summary>
    /// The containing class representing a complete episode story trace.
    /// </summary>
    public class Episode {
        /// <summary>
        /// The unique identifying string for this episode.
        /// </summary>
        public string ID { get; private set; }
        /// <summary>
        /// The InitialState for this episode.
        /// </summary>
        public InitialState InitialState { get; private set; }
        /// <summary>
        /// The collection of StoryEvents contained within this episode.
        /// </summary>
        public List<StoryEvent> Events { get; private set; }
		public List<Link> Links { get; private set;}
        /// <summary>
        /// Private constructor for the purposes of serialization.
        /// </summary>
		/* public Episode(int a) {
            this.ID = "unassigned";
			Links = new List<Link>();
			Links.Add(new Link(1, 0));
        }
		*/
		private Episode() {this.ID = "unassigned";}
		
		public Episode(List<StoryEvent> events, List<Link> links)
		{
			this.ID = "unassigned";
			this.Events = events;
			this.Links = links;
		}
		
        /// <summary>
        /// Deserializes an Episode from an XML string generated by the story generator.
        /// </summary>
        /// <param name="xml">The XML content.</param>
        /// <returns>The Episode from the string data.</returns>
        public static Episode Deserialize(string xml) {
            XmlSerializer serializer = new XmlSerializer(typeof(Episode));
			
			//System.IO.StreamWriter writer  = new System.IO.StreamWriter(@".\WriteLines2.txt");
			
			//serializer.Serialize(writer, new Episode(2));

            StringReader reader = new StringReader(xml);
            Episode ep = (Episode)serializer.Deserialize(reader);

            //Convert propositions and storyevents.
			if (ep.InitialState != null)
			{
	            foreach (Proposition prop in ep.InitialState.HealthStatuses) prop.MapVariables();
	            foreach (Proposition prop in ep.InitialState.Locations) prop.MapVariables();
	            foreach (Proposition prop in ep.InitialState.Possessions) prop.MapVariables();
			}
			if (ep.Events != null)
			{
            	foreach (StoryEvent ev in ep.Events) ev.MapVariables();
			}

            Debug.Log("Loaded " + ep.Events.Count + " events into Episode.");

            #region Episode deserilization test...
            //foreach (StoryEvent ev in this.Events) {
            //    string str = ev.Name + ": ";
            //    foreach (Variable v in ev.Variables) {
            //        str += v.Name + " = " + v.Value + ", ";
            //    }
            //    Debug.Log(str);
            //}
            //foreach (Proposition prop in ep.InitialState.Locations) {

            //}
            #endregion

            return ep;
        }
    }
}